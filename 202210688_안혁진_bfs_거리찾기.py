# -*- coding: utf-8 -*-
"""202210688 안혁진 BFS 거리찾기.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sinMxsx0i4LQpije-t23AtfVbRih9MI3
"""

import numpy as np
N,Kmax = 8,4
K = np.array([1,2,4,1,1,3,1,1]) # 이웃의 수
nn = np.empty([N,Kmax], int) # 이웃들

nn[0] = np.array([2,-1,-1,-1])
nn[1] = np.array([2,5,-1,-1])
nn[2] = np.array([0,1,3,4])
nn[3] = np.array([2,-1,-1,-1])
nn[4] = np.array([2,-1,-1,-1])
nn[5] = np.array([1,6,7,-1])
nn[6] = np.array([5,-1,-1,-1])
nn[7] = np.array([5,-1,-1,-1])

nn

import queue

def bfs(K, nn, start, discovered):
 q = queue.Queue()
 q.put(start) # 빈 큐에 출발점 추가하고
 discovered[start] = 0  # 이 점을 발견 .
 while q.qsize() > 0: # 큐에 원소가 남아있는 한
  element = q.get() # 큐에서 한 점을 뽑아서
  for k in range(K[element]):
    neighbor = nn[element][k] # 그 이웃 각각에 대해
    if discovered[neighbor] == -1 : # 미발견이면
      q.put(neighbor) # 큐에 추가하고
      discovered[neighbor] = discovered[element]+ 1   # 이 점을 발견 .

 return discovered
start = 0
discovered = np.array([-1 ,-1 ,-1 , -1 ,-1 ,-1 ,-1 ,-1 ])
a = bfs(K,nn,start,discovered)

print(a)

def bfs(K, nn, start, discovered):
 q = queue.Queue()
 q.put(start) # 빈 큐에 출발점 추가하고
 discovered[start] = True # 이 점을 발견 .
 while q.qsize()>0: # 큐에 원소가 남아있는 한
 element = q.get() # 큐에서 한 점을 뽑아서
 for k in range(K[element]):
 neighbor = nn[element][k] # 그 이웃 각각에 대해
 if discovered[neighbor]==False: # 미발견이면
 q.put(neighbor) # 큐에 추가하고
 discovered[neighbor] = True # 이 점을 발견 .