# -*- coding: utf-8 -*-
"""202210688_안혁진_무작위 걷기.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Rn-kfIywMYVXCLO_OAnglmga5zAL16Wi
"""

import numpy as np

N = 100000

# 50개의 스텝에서 각각 -1 또는 1을 선택하는 시뮬레이션
steps = np.random.choice([-1, 1], size=(N, 50), p=[0.6, 0.4])

# 각 시뮬레이션 당 총 이동 거리 계산
f = np.sum(steps, axis=1)

# 총 이동 거리가 15 이상인 경우의 비율 계산
result = np.sum(f >= 15) / N

print("15 이상:", result)



# import random as rd

# N = 100000
# result = 0

# for _ in range(N):
#     step = 0
#     for _ in range(50):
#         p = rd.uniform(0, 1)
#         if p <= 0.4:
#             step += 1
#         else:
#             step -= 1
#     if step >= 15:
#         result += 1

# print("15 이상:", result)


# result / N

import numpy as np

N = 10000

# 0부터 1까지 균등 분포에서 50개의 난수 생성
steps = np.random.uniform(0, 1, size=(N, 50))

# steps_a 배열 생성: 0.65 이하인 경우 1로, 그 이상인 경우 -1로 변환
steps_a = np.where(steps <= 0.65, 1, -1)

# 각 행(axis=1)의 합을 구하여 총 이동 거리 계산
sum_per_row = np.sum(steps_a, axis=1)

# 각 행(axis=1)에서 값이 1인 경우의 수 계산
plus = np.sum(steps_a == 1, axis=1)

# 가중치 계산: 총 이동 거리가 15 이상인 경우와 그렇지 않은 경우로 나눔
weights = np.where(sum_per_row >= 15, (0.4/0.65)**plus * (0.6/0.35)**(50 - plus), 0)

# 결과 출력: 가중치의 평균 계산
print('답 : ', np.sum(weights) / N)


# import numpy as np
# import random as rd
# N = 10000
# total_w = 0
# for _ in range(N):
#     step = 0
#     plus = 0
#     for _ in range(50):
#         p = rd.uniform(0, 1)
#         if p <= 0.65:
#             step += 1
#             plus += 1
#         else:
#             step -= 1
#     if step >= 15:
#       w =  (0.4/0.65)**(plus) * (0.6/0.35)**(50-plus)
#       total_w += w


# total_w / N