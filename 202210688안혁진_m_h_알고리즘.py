# -*- coding: utf-8 -*-
"""202210688안혁진_M-H 알고리즘.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Go5Ble3D2_S8U9cG_-Nw5WtHE-uoKc68
"""

import random as rd
import numpy as np
import matplotlib.pyplot as plt

def p(x):
  return np.sqrt(2*np.pi) * np.exp(-x**2/2)

def q(x,m,s = 0.5):
  return 1/s * np.exp(-(x-m)/s)*np.exp(-np.exp(-(x-m)/s))

T = 10000  # 시뮬레이션 반복 횟수
x = 5  # 초기 x 값
xlist = [x]  # x 값들을 저장할 리스트

# T번 반복하여 Metropolis 알고리즘을 수행
for i in range(T):
    next_x = x  # 현재 x 값
    xstar = np.random.gumbel(loc=next_x, scale=0.5)  # 제안 분포로부터 새로운 xstar 값을 샘플링
    # 계산할 acceptance ratio (alpha) 계산
    alpha = min(1, (p(xstar) * q(x=next_x, m=xstar)) / (p(next_x) * q(x=xstar, m=next_x)))

    # Metropolis 알고리즘에 따라 x 값 업데이트
    if alpha == 1:
        x = xstar  # alpha가 1이면 항상 새로운 xstar를 선택
        xlist.append(x)  # x 값을 리스트에 추가
    else:
        u = rd.uniform(0, 1)  # 0과 1 사이의 균일 분포에서 난수 u 생성
        if u < alpha:
            x = xstar  # alpha보다 u가 작으면 새로운 xstar를 선택
            xlist.append(x)  # x 값을 리스트에 추가
        else:
            xlist.append(next_x)  # 아니면 현재 x 값을 유지하고 리스트에 추가

# 결과 시각화: x 값들의 히스토그램을 그림
plt.hist(xlist, bins=100)