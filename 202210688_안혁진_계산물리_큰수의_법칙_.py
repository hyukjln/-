# -*- coding: utf-8 -*-
"""202210688 안혁진 계산물리 큰수의 법칙 .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aVeuHiCsFRduIdIQYD3B6apqxs2oJJ_C

**방법 1 : uniform**
"""

import random as rd

# 시뮬레이션 반복 횟수
N = 100000

# 개별 반복 시의 결과를 저장할 리스트
gi_1 = []

# 평균 계산을 위한 변수 초기화
result1 = 0

# 함수 g(x) 정의
def g(x):
    return 3 * x**2

# 10번 반복하여 시뮬레이션 수행
for i in range(10):
    sum = 0
    # N번의 무작위 샘플을 이용하여 함수 g의 값을 합산
    for i in range(N):
        sum += g(rd.random())
    # 평균 값을 계산하여 result1에 누적
    result1 += sum / N
    # 개별 결과를 리스트에 저장
    gi_1.append(sum / N)

# 10번 반복한 평균 값 계산
avg_g1 = result1 / 10

# 평균 값 출력
print("uniform 방법 평균", avg_g1)

# 분산 계산을 위한 변수 초기화
sum_k = 0

# 분산 계산
for i in range(10):
    k = (gi_1[i] - avg_g1)**2
    sum_k += k

# 분산 값 계산
var1 = sum_k / 9

# 분산 값 출력
print("uniform 방법 분산", var1)

# 개별 반복 결과 출력
print(gi_1)

import numpy as np

# 시뮬레이션 반복 횟수 및 반복 횟수 설정
N = 100000
num_iterations = 10

# 함수 g(x) 정의
def g(x):
    return 3 * x**2

# 무작위 숫자를 생성하여 num_iterations x N 형태의 배열 생성
random_numbers = np.random.random((num_iterations, N))

# 각 반복에 대해 함수 g(x)의 평균 값을 계산하여 배열로 저장
gi_values = np.mean(g(random_numbers), axis=1)

# 10번 반복한 평균 값 계산
avg_g1 = np.mean(gi_values)

# 10번 반복한 분산 값 계산
var_g1 = np.var(gi_values)

# 평균 값 출력
print("uniform 방법 평균", avg_g1)

# 분산 값 출력
print("uniform 방법 분산", var_g1)

# 각 반복에 대한 평균 값 출력
print(gi_values)

"""**방법 2 : beta(a,b) **"""

import math
import numpy as np

a = 2
b = 2
gi_2 = []
result2 = 0

# 함수 f(x) 정의
def f(x):
    return (math.gamma(a+b) * x**(a-1) * (1-x)**(b-1)) / (math.gamma(a) * math.gamma(b))

# 함수 g(x) 정의
def g(x):
    return 3 * x**2

# N 값 설정 (N 값을 추가해야 함)
N = 1000

# 메인 루프 (10회 반복)
for i in range(10):
    sum = 0
    for i in range(N):
        # 베타 분포에서 난수 생성
        random_number = np.random.beta(a, b)
        sum += g(random_number) / f(random_number)

    # 결과 합산
    result2 += sum / N
    gi_2.append(sum / N)

# 평균 계산
avg_g2 = result2 / 10
print("beta(a,b) 방법 평균", avg_g2)

# 분산 계산
sum_k = 0
for i in range(10):
    k = (gi_2[i] - avg_g2)**2
    sum_k += k

var2 = sum_k / 9
print("beta(a,b) 방법 분산", var2)

print(gi_2)

import numpy as np
from scipy.stats import beta

a = 2
b = 2
N = 100000  # 샘플 크기
num_iterations = 10  # 반복 횟수

# 베타 분포의 확률 밀도 함수
def f(x):
    return beta.pdf(x, a, b)
# 함수 g(x) 정의
def g(x):
    return 3 * x**2
# N개의 랜덤 넘버를 num_iterations 번 생성
random_numbers = np.random.beta(a, b, (num_iterations, N))

# 반복마다의 gi 값 계산
gi_values = np.mean(g(random_numbers) / f(random_numbers), axis=1)

# 평균 계산
avg_g2 = np.mean(gi_values)

# 분산 계산
var_g2 = np.var(gi_values)

# 결과 출력
print("beta(a,b) 방법 평균", avg_g2)
print("beta(a,b) 방법 분산", var_g2)
print(gi_values)

"""**방법 3 : f(y) = 2*y**"""

import math
import numpy as np
import random as rd

# 함수 g(x) 정의
def g(x):
    return 3 * x**2
# 샘플 크기 및 반복 횟수 정의
N = 100000
num_iterations = 10

gi_3 = []
result3 = 0

# fy(x) 함수 정의
def fy(x):
    return 2 * x

# 주 반복 루프 (10회 반복)
for i in range(num_iterations):
    sum = 0
    for i in range(N):
        # [0,1] 구간에서 균등 분포를 따르는 난수 생성
        x = rd.uniform(0, 1)
        # y_1 계산
        y_1 = math.sqrt(x)
        # g(y_1) / fy(y_1) 값 합산
        sum += g(y_1) / fy(y_1)
    # 각 반복의 평균 계산
    result3 += sum / N
    gi_3.append(sum / N)

# 전체 평균 계산
avg_g3 = result3 / num_iterations
print("f(y) = 2*y 방법 평균", avg_g3)

# 분산 계산
sum_k = 0
for i in range(num_iterations):
    k = (gi_3[i] - avg_g3)**2
    sum_k += k

var3 = sum_k / (num_iterations - 1)
print("f(y) = 2*y 방법 분산", var3)

# gi_3 값 출력
print(gi_3)

import numpy as np

# 샘플 크기 및 반복 횟수 정의
N = 100000
num_iterations = 10

# fy(x) 함수 정의
def fy(x):
    return 2 * x

# g(y) 함수 정의
def g(y):
    return 3 * y**2

# [0,1] 구간에서 균등 분포를 따르는 난수 생성
random_numbers = np.random.uniform(0, 1, (num_iterations, N))

# 난수를 y 값으로 변환
y_values = np.sqrt(random_numbers)

# 각 반복의 gi 값 계산
gi_values = np.mean(g(y_values) / fy(y_values), axis=1)

# 평균 계산
avg_g3 = np.mean(gi_values)

# 분산 계산
var_g3 = np.var(gi_values)

# 결과 출력
print("f(y) = 2*y 방법 평균", avg_g3)
print("f(y) = 2*y 방법 분산", var_g3)
print(gi_values)

print("""방법 1 평균 : {} , 방법 2 평균 : {} , 방법 3 평균 : {}
방법 1 분산 : {} , 방법 2 분산 : {} , 방법 3 분산 : {}""".format(avg_g1,avg_g2,avg_g3,var1,var2,var3))

